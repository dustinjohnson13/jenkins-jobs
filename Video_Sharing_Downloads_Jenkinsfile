#!groovy
import groovy.json.JsonOutput

stage('Run') {
    node {
        def EMAIL_ADDRESS = "${env.EMAIL}".toString()
        def BUILD = "${env.JOB_NAME} - #${env.BUILD_NUMBER}".toString()
        def YOUTUBE = 'https://www.youtube.com'
        def BASE_DIR = '/data/archives/video/sharing'
        def DOWNLOAD = 'youtube-dl --extract-audio --ignore-errors --download-archive downloaded.txt'
        def MAX_DOWNLOADS = '--max-downloads'

        def URLS_BY_DIR = [
                "jocko_podcast"          : "${YOUTUBE}/channel/UCkqcY4CAuBFNFho6JgygCnA/videos",
                "powerfuljre"            : "${YOUTUBE}/user/PowerfulJRE/videos",
                "starling_and_stone"     : "${YOUTUBE}/user/SterlingandStone/videos",
                "the_career_author"      : "${YOUTUBE}/channel/UCmIYVcr1UdWgSvYpb3Ol3xg"
        ]

        def EXTRA_OPTIONS = [:]

        def email = null
        currentBuild.result = "SUCCESS"

        def failed = [] as Set

        try {
            URLS_BY_DIR.each { directory, url ->
                def targetDir = "${BASE_DIR}/${directory}".toString()
                def extraOptions = EXTRA_OPTIONS.get(directory, '')
                def downloadsLimited = extraOptions.contains(MAX_DOWNLOADS)

                dir(targetDir) {
                    def status = sh(returnStatus: true, script: "${DOWNLOAD} ${extraOptions} -f 'best[height<=720]+bestaudio' '${url}'")
                    if (!(status == 0 || downloadsLimited)) {
                        failed += directory
                    }

                    if (!downloadsLimited) {
                        // Now grab any that didn't match the previous command due to format... could do this only if an error occurs
                        status = sh(returnStatus: true, script: "${DOWNLOAD} '${url}'")
                        if (status != 0) {
                            failed += directory
                        }
                    }
                }
            }

            if (!failed.isEmpty()) {
                email = [to: EMAIL_ADDRESS, from: EMAIL_ADDRESS, subject: "$BUILD partial failure!", body: "Failed: ${failed}! See ${env.BUILD_URL} for details."]
            }
        } catch (err) {
            currentBuild.result = "FAILURE"

            email = [to: EMAIL_ADDRESS, from: EMAIL_ADDRESS, subject: "$BUILD failed!", body: "${env.JOB_NAME} failed! See ${env.BUILD_URL} for details."]

            throw err
        } finally {
            if (email) {
                emailext body: email.body, recipientProviders: [[$class: 'DevelopersRecipientProvider']], subject: email.subject, to: "${env.EMAIL}"
            }
        }
    }
}
